package com.lot.marketEvent.model


import java.sql.Date
import slick.driver.MySQLDriver.api._
import com.github.tototoshi.slick.H2JodaSupport._
import spray.json.DefaultJsonProtocol
import spray.json.RootJsonFormat
import org.joda.time.DateTime
import org.joda.time.format.DateTimeFormatter
import spray.json.JsString
import spray.json.JsValue
import spray.json.DeserializationException
import org.joda.time.format.ISODateTimeFormat
import com.lot.utils.CustomJson

case class TriggeredEventDTO(triggeredEvent:TriggeredEvent, marketEvent: MarketEvent)

/**
 * The model to hold a triggered market event
 * Note when an event is triggered it will be displayed on the user screens
 * But it needs to be sent to the simulator for trades to be generated by the sim_users
 */
case class TriggeredEvent(id: Option[Long],
                          market_event_id: Long,
                          sent_to_sim: Boolean = false,
                          created_at: Option[DateTime],
                          updated_at: Option[DateTime])



/**
 * The DB schema
 */
class TriggeredEventTable(tag: Tag) extends Table[TriggeredEvent](tag, "triggered_events") {
  /*
   * Auto inc primary key
   */
  def id = column[Long]("id", O.PrimaryKey, O.AutoInc)
  /*
   * Updated automatically by the DAO on save
   */
  def created_at = column[Option[DateTime]]("created_at", O.Nullable)
  /*
   * Updated automatically by the DAO on update
   */
  def updated_at = column[Option[DateTime]]("updated_at", O.Nullable)
  /*
   * The rest of the domain specific fields
   */
  def market_event_id = column[Long]("market_event_id")
  def sent_to_sim = column[Boolean]("sent_to_sim")

  def * = (id.?, market_event_id, sent_to_sim, created_at, updated_at) <> (TriggeredEvent.tupled, TriggeredEvent.unapply)
}


/**
 * The JSON protocol
 */
  
object TriggeredEventJsonProtocol extends CustomJson {
  implicit val triggeredEventFormat = jsonFormat5(TriggeredEvent)
  implicit val marketEventFormat = jsonFormat14(MarketEvent)
  implicit val dtoFormat = jsonFormat2(TriggeredEventDTO)
}